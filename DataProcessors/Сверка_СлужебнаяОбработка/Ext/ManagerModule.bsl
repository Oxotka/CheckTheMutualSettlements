// Все изменения за исключением запросов помечены комментарием "Сверка_"
// 
// Данная обработка служебная и используется для вызова кода модуля менеджера. 
// Это связано с текущими ограничениями работы расширения.
// В основном используется код из типовой конфигурации, 
// все изменения помечены тегом "Сверка_".

#Область Заполнение

Процедура ПодготовитьДанныеДляЗаполнения(СтруктураПараметров, АдресХранилища) Экспорт
	
	// Расширение "Сверка_".
	// Одноименная процедура заимствована из Модуля менеджера документа "АктСверкиВзаиморасчетов"
	// Типовой код оставлен для совместимости - в случае, если в типовой поменяется, легко изменить в расширении.
	//
	// Список изменений в расширении:
	// 1. Добавлены параметры:
	// - ВключатьОбособленные
	// - ВыводитьНомераСчетовФактур
	// 2. Изменен запрос:
	// - Формируется временная таблица Контрагенты
	// - формируется временная таблица ТаблицаСчетаФактуры
	// - изменены условия на проверку контрагента, добавлена развилка
	// - Обороты регистра бухгалтерии помещены во временную таблицу
	// - К этой таблицы присоединены ДанныеПервичныхДокументов и ТаблицаСчетаФактуры
	// 3. Остальное типовой код см. Документ.АктСверкиВзаиморасчетов.ПодготовитьДанныеДляЗаполнения()
	
	УстановитьПривилегированныйРежим(Истина);
	
	СтруктураДанныхЗаполнения = Новый Структура();
	СтруктураДанныхЗаполнения.Вставить("Успешно", Истина);
	
	Если НЕ ПроверитьОтложенныеРасчеты(СтруктураПараметров) Тогда
		СтруктураДанныхЗаполнения.Успешно = Ложь;
		ПоместитьВоВременноеХранилище(СтруктураДанныхЗаполнения, АдресХранилища);
		Возврат;
	КонецЕсли;
	
	СчетаУчетаНДСпоАренднымОбязательствам = Новый Массив;
	СчетаУчетаНДСпоАренднымОбязательствам.Добавить(ПланыСчетов.Хозрасчетный.НДСпоАренднымОбязательствам);
	СчетаУчетаНДСпоАренднымОбязательствам.Добавить(ПланыСчетов.Хозрасчетный.НДСпоАренднымОбязательствамУЕ);
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	
	Запрос.УстановитьПараметр("ДатаНачала",                 СтруктураПараметров.ДатаНачалаВключая);
	Запрос.УстановитьПараметр("ДатаОкончания",              СтруктураПараметров.ДатаОкончания);
	Запрос.УстановитьПараметр("Организация",                СтруктураПараметров.Организация);
	Запрос.УстановитьПараметр("Контрагент",                 СтруктураПараметров.Контрагент);
	Запрос.УстановитьПараметр("Валюта",                     СтруктураПараметров.Валюта);
	Запрос.УстановитьПараметр("ФильтрСписокСчетов",         СтруктураПараметров.ФильтрСписокСчетов);
	Запрос.УстановитьПараметр("АналитикаРасчетов",          СтруктураПараметров.АналитикаРасчетов);
	Запрос.УстановитьПараметр("ДоговорКонтрагента",         СтруктураПараметров.ДоговорКонтрагента);
	Запрос.УстановитьПараметр("РазбитьПоДоговорам",         СтруктураПараметров.РазбитьПоДоговорам);
	Запрос.УстановитьПараметр("СчетаУчетаНДСпоАренднымОбязательствам", СчетаУчетаНДСпоАренднымОбязательствам);
	// Добавим параметры требуемые для работы расширения. "Сверка_"
	Запрос.УстановитьПараметр("ВключатьОбособленные",       СтруктураПараметров.ВключатьОбособленные);
	Запрос.УстановитьПараметр("ВыводитьНомераСчетовФактур", СтруктураПараметров.ВыводитьНомераСчетовФактур);
	
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	Хозрасчетный.Ссылка КАК Счет
	|ПОМЕСТИТЬ ФильтрСписокСчетов
	|ИЗ
	|	ПланСчетов.Хозрасчетный КАК Хозрасчетный
	|ГДЕ
	|	Хозрасчетный.Ссылка В ИЕРАРХИИ(&ФильтрСписокСчетов)
	|	И НЕ Хозрасчетный.Ссылка В (&СчетаУчетаНДСпоАренднымОбязательствам)
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Счет
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	Контрагенты.Ссылка КАК Контрагент
	|ПОМЕСТИТЬ Контрагенты
	|ИЗ
	|	Справочник.Контрагенты КАК Контрагенты
	|ГДЕ
	|	Контрагенты.ГоловнойКонтрагент = &Контрагент
	|	И &ВключатьОбособленные = ИСТИНА
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Контрагент
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ДоговорыКонтрагентов.Ссылка КАК Договор
	|ПОМЕСТИТЬ ДоговораКонтрагента
	|ИЗ
	|	Справочник.ДоговорыКонтрагентов КАК ДоговорыКонтрагентов
	|ГДЕ
	|	ДоговорыКонтрагентов.Ссылка В ИЕРАРХИИ(&ДоговорКонтрагента)
	|	И &ДоговорКонтрагента <> НЕОПРЕДЕЛЕНО
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Договор
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	СчетФактураВыданныйДокументыОснования.ДокументОснование КАК ДокументОснование,
	|	СчетФактураВыданныйДокументыОснования.Ссылка КАК СчетФактура,
	|	""Выданный"" КАК ВидСчетаФактуры
	|ПОМЕСТИТЬ ТаблицаСчетаФактуры
	|ИЗ
	|	Документ.СчетФактураВыданный.ДокументыОснования КАК СчетФактураВыданныйДокументыОснования
	|ГДЕ
	|	ВЫБОР
	|			КОГДА &ВключатьОбособленные
	|				ТОГДА СчетФактураВыданныйДокументыОснования.Ссылка.Контрагент В
	|						(ВЫБРАТЬ
	|							Контрагенты.Контрагент
	|						ИЗ
	|							Контрагенты)
	|			ИНАЧЕ СчетФактураВыданныйДокументыОснования.Ссылка.Контрагент = &Контрагент
	|		КОНЕЦ
	|	И ВЫБОР
	|			КОГДА &ДоговорКонтрагента = НЕОПРЕДЕЛЕНО
	|				ТОГДА ИСТИНА
	|			ИНАЧЕ СчетФактураВыданныйДокументыОснования.Ссылка.ДоговорКонтрагента В
	|					(ВЫБРАТЬ
	|						ДоговораКонтрагента.Договор
	|					ИЗ
	|						ДоговораКонтрагента)
	|		КОНЕЦ
	|	И СчетФактураВыданныйДокументыОснования.Ссылка.ПометкаУдаления = ЛОЖЬ
	|	И СчетФактураВыданныйДокументыОснования.Ссылка.Проведен = ИСТИНА
	|	И СчетФактураВыданныйДокументыОснования.Ссылка.Организация = &Организация
	|	И &ВыводитьНомераСчетовФактур = Истина
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	СчетФактураПолученныйДокументыОснования.ДокументОснование,
	|	СчетФактураПолученныйДокументыОснования.Ссылка,
	|	""Полученный""
	|ИЗ
	|	Документ.СчетФактураПолученный.ДокументыОснования КАК СчетФактураПолученныйДокументыОснования
	|ГДЕ
	|	ВЫБОР
	|			КОГДА &ВключатьОбособленные
	|				ТОГДА СчетФактураПолученныйДокументыОснования.Ссылка.Контрагент В
	|						(ВЫБРАТЬ
	|							Контрагенты.Контрагент
	|						ИЗ
	|							Контрагенты)
	|			ИНАЧЕ СчетФактураПолученныйДокументыОснования.Ссылка.Контрагент = &Контрагент
	|		КОНЕЦ
	|	И ВЫБОР
	|			КОГДА &ДоговорКонтрагента = НЕОПРЕДЕЛЕНО
	|				ТОГДА ИСТИНА
	|			ИНАЧЕ СчетФактураПолученныйДокументыОснования.Ссылка.ДоговорКонтрагента В
	|					(ВЫБРАТЬ
	|						ДоговораКонтрагента.Договор
	|					ИЗ
	|						ДоговораКонтрагента)
	|		КОНЕЦ
	|	И СчетФактураПолученныйДокументыОснования.Ссылка.ПометкаУдаления = ЛОЖЬ
	|	И СчетФактураПолученныйДокументыОснования.Ссылка.Проведен = ИСТИНА
	|	И СчетФактураПолученныйДокументыОснования.Ссылка.Организация = &Организация
	|	И &ВыводитьНомераСчетовФактур = Истина
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	ДокументОснование
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ХозрасчетныйОбороты.Период КАК Дата,
	|	ХозрасчетныйОбороты.Регистратор КАК Документ,
	|	ХозрасчетныйОбороты.Субконто2 КАК Договор,
	|	ВЫБОР
	|		КОГДА &Валюта = НЕОПРЕДЕЛЕНО
	|			ТОГДА ХозрасчетныйОбороты.СуммаОборотДт
	|		ИНАЧЕ ХозрасчетныйОбороты.ВалютнаяСуммаОборотДт
	|	КОНЕЦ КАК Дебет,
	|	ВЫБОР
	|		КОГДА &Валюта = НЕОПРЕДЕЛЕНО
	|			ТОГДА ХозрасчетныйОбороты.СуммаОборотКт
	|		ИНАЧЕ ХозрасчетныйОбороты.ВалютнаяСуммаОборотКт
	|	КОНЕЦ КАК Кредит,
	|	ХозрасчетныйОбороты.КорСчет,
	|	ХозрасчетныйОбороты.КорСубконто1,
	|	ХозрасчетныйОбороты.КорСубконто2,
	|	ХозрасчетныйОбороты.КорСубконто3,
	|	ХозрасчетныйОбороты.Валюта,
	|	ХозрасчетныйОбороты.ВалютнаяСуммаОборот,
	|	ВЫБОР
	|		КОГДА ХозрасчетныйОбороты.КорСубконто1 ССЫЛКА Справочник.ПрочиеДоходыИРасходы
	|			ТОГДА ВЫРАЗИТЬ(ХозрасчетныйОбороты.КорСубконто1 КАК Справочник.ПрочиеДоходыИРасходы).ВидПрочихДоходовИРасходов
	|		ИНАЧЕ НЕОПРЕДЕЛЕНО
	|	КОНЕЦ КАК ВидПрочихДоходовИРасходов,
	|	ХозрасчетныйОбороты.Счет
	|ПОМЕСТИТЬ ТаблицаДокументы
	|ИЗ
	|	РегистрБухгалтерии.Хозрасчетный.Обороты(
	|			&ДатаНачала,
	|			&ДатаОкончания,
	|			Регистратор,
	|			Счет В
	|				(ВЫБРАТЬ
	|					ФильтрСписокСчетов.Счет
	|				ИЗ
	|					ФильтрСписокСчетов),
	|			&АналитикаРасчетов,
	|			Организация = &Организация
	|				И ВЫБОР
	|					КОГДА &Валюта = НЕОПРЕДЕЛЕНО
	|						ТОГДА ИСТИНА
	|					ИНАЧЕ Валюта = &Валюта
	|				КОНЕЦ
	|				И ВЫБОР
	|					КОГДА &ВключатьОбособленные
	|						ТОГДА Субконто1 В
	|								(ВЫБРАТЬ
	|									Контрагенты.Контрагент
	|								ИЗ
	|									Контрагенты)
	|					ИНАЧЕ Субконто1 = &Контрагент
	|				КОНЕЦ
	|				И ВЫБОР
	|					КОГДА &ДоговорКонтрагента = НЕОПРЕДЕЛЕНО
	|						ТОГДА ИСТИНА
	|					ИНАЧЕ Субконто2 В
	|							(ВЫБРАТЬ
	|								ДоговораКонтрагента.Договор
	|							ИЗ
	|								ДоговораКонтрагента)
	|				КОНЕЦ,
	|			,
	|			) КАК ХозрасчетныйОбороты
	|ГДЕ
	|	ВЫБОР
	|			КОГДА ХозрасчетныйОбороты.КорСчет В
	|					(ВЫБРАТЬ
	|						ФильтрСписокСчетов.Счет
	|					ИЗ
	|						ФильтрСписокСчетов)
	|				ТОГДА ВЫБОР
	|						КОГДА &ДоговорКонтрагента = НЕОПРЕДЕЛЕНО
	|							ТОГДА ВЫБОР
	|									КОГДА &РазбитьПоДоговорам
	|										ТОГДА НЕ ХозрасчетныйОбороты.КорСубконто2 = ХозрасчетныйОбороты.Субконто2
	|									ИНАЧЕ НЕ ХозрасчетныйОбороты.КорСубконто1 = &Контрагент
	|								КОНЕЦ
	|						ИНАЧЕ НЕ(ХозрасчетныйОбороты.КорСубконто1 = &Контрагент
	|									И ХозрасчетныйОбороты.КорСубконто2 = ХозрасчетныйОбороты.Субконто2)
	|					КОНЕЦ
	|			ИНАЧЕ ИСТИНА
	|		КОНЕЦ
	|	И НЕ(ВЫБОР
	|					КОГДА &Валюта = НЕОПРЕДЕЛЕНО
	|						ТОГДА ХозрасчетныйОбороты.СуммаОборотДт
	|					ИНАЧЕ ХозрасчетныйОбороты.ВалютнаяСуммаОборотДт
	|				КОНЕЦ = 0
	|				И ВЫБОР
	|					КОГДА &Валюта = НЕОПРЕДЕЛЕНО
	|						ТОГДА ХозрасчетныйОбороты.СуммаОборотКт
	|					ИНАЧЕ ХозрасчетныйОбороты.ВалютнаяСуммаОборотКт
	|				КОНЕЦ = 0)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ТаблицаДокументы.Дата КАК Дата,
	|	ТаблицаДокументы.Документ КАК Документ,
	|	ТаблицаДокументы.Договор,
	|	ТаблицаДокументы.Дебет,
	|	ТаблицаДокументы.Кредит,
	|	ТаблицаДокументы.КорСчет,
	|	ТаблицаДокументы.КорСубконто1,
	|	ТаблицаДокументы.КорСубконто2,
	|	ТаблицаДокументы.КорСубконто3,
	|	ТаблицаДокументы.Валюта,
	|	ТаблицаДокументы.ВалютнаяСуммаОборот,
	|	ТаблицаДокументы.ВидПрочихДоходовИРасходов,
	|	ТаблицаДокументы.Счет,
	|	ТаблицаСчетаФактуры.СчетФактура,
	|	ТаблицаСчетаФактуры.ВидСчетаФактуры,
	|	ДанныеПервичныхДокументов.НомерРегистратора КАК Номер,
	|	ЕСТЬNULL(ДанныеПервичныхДокументов.Номер, НЕОПРЕДЕЛЕНО) КАК НомерВходящегоДокумента,
	|	ЕСТЬNULL(ДанныеПервичныхДокументов.Дата, НЕОПРЕДЕЛЕНО) КАК ДатаВходящегоДокумента
	|ИЗ
	|	ТаблицаДокументы КАК ТаблицаДокументы
	|		ЛЕВОЕ СОЕДИНЕНИЕ ТаблицаСчетаФактуры КАК ТаблицаСчетаФактуры
	|		ПО ТаблицаДокументы.Документ = ТаблицаСчетаФактуры.ДокументОснование
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ДанныеПервичныхДокументов КАК ДанныеПервичныхДокументов
	|		ПО ТаблицаДокументы.Документ = ДанныеПервичныхДокументов.Документ
	|			И (ДанныеПервичныхДокументов.Организация = &Организация)
	|
	|УПОРЯДОЧИТЬ ПО
	|	Дата УБЫВ,
	|	Документ";
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	ТаблицаПоДаннымОрганизации = Новый ТаблицаЗначений;
	ТаблицаПоДаннымОрганизации.Колонки.Добавить("Договор",       Новый ОписаниеТипов("СправочникСсылка.ДоговорыКонтрагентов"));
	ТаблицаПоДаннымОрганизации.Колонки.Добавить("Дата",          ОбщегоНазначения.ОписаниеТипаДата(ЧастиДаты.ДатаВремя));
	ТаблицаПоДаннымОрганизации.Колонки.Добавить("Документ",      Документы.ТипВсеСсылки());
	ТаблицаПоДаннымОрганизации.Колонки.Добавить("Представление", ОбщегоНазначения.ОписаниеТипаСтрока(100));
	ТаблицаПоДаннымОрганизации.Колонки.Добавить("Дебет",         ОбщегоНазначения.ОписаниеТипаЧисло(15,2));
	ТаблицаПоДаннымОрганизации.Колонки.Добавить("Кредит",        ОбщегоНазначения.ОписаниеТипаЧисло(15,2));
	ТаблицаПоДаннымОрганизации.Колонки.Добавить("Валюта",        Новый ОписаниеТипов("СправочникСсылка.Валюты"));
	ТаблицаПоДаннымОрганизации.Колонки.Добавить("ВалютнаяСумма", ОбщегоНазначения.ОписаниеТипаЧисло(15,2));
	
	КэшМетаданных = Новый Соответствие;
	
	Пока Выборка.Следующий() Цикл

		Если Выборка.Дебет = 0 И Выборка.Кредит = 0 Тогда
			Продолжить;
		КонецЕсли;

		МетаданныеДокумента = ПолучитьМетаданныеДокумента(Выборка.Документ, КэшМетаданных);
		
		НоваяСтрока = ТаблицаПоДаннымОрганизации.Добавить();
		НоваяСтрока.Документ           = Выборка.Документ;
		НоваяСтрока.Договор            = Выборка.Договор;
		НоваяСтрока.Дата               = Выборка.Дата;
		НоваяСтрока.Дебет              = Выборка.Дебет;
		НоваяСтрока.Кредит             = Выборка.Кредит;
		НоваяСтрока.Валюта             = Выборка.Валюта;
		НоваяСтрока.ВалютнаяСумма      = Выборка.ВалютнаяСуммаОборот;
		
		// Сформируем строку представления
		Представление = "";
		
		Если СтруктураПараметров.ВыводитьПолныеНазванияДокументов Тогда
			Если Выборка.НомерВходящегоДокумента = Неопределено Тогда
				Представление = МетаданныеДокумента.Представление() + " №" + Символы.НПП + Выборка.Номер;
			Иначе
				Представление = МетаданныеДокумента.Представление() + " (" + 
					?(НЕ ЗначениеЗаполнено(Выборка.НомерВходящегоДокумента), "_______", 
					Выборка.НомерВходящегоДокумента) + " от " 
					+ ?(НЕ ЗначениеЗаполнено(Выборка.ДатаВходящегоДокумента), 
					"'  .  .    '",
					Формат(Выборка.ДатаВходящегоДокумента, "ДФ=dd.MM.yyyy")) + ")";
			КонецЕсли;	
		Иначе
			
			Если БухгалтерскийУчетПовтИсп.СчетВИерархии(Выборка.КорСчет, ПланыСчетов.Хозрасчетный.ПрочиеДоходыИРасходы) Тогда
				
				Если НЕ ЗначениеЗаполнено(Выборка.ВидпрочихДоходовИРасходов) Тогда
					
				ИначеЕсли Выборка.ВидПрочихДоходовИРасходов = Перечисления.ВидыПрочихДоходовИРасходов.КурсовыеРазницы Тогда
					Представление = "Курсовые разницы";
				ИначеЕсли Выборка.ВидПрочихДоходовИРасходов = Перечисления.ВидыПрочихДоходовИРасходов.ШтрафыПениНеустойкиКПолучениюУплате Тогда
					Представление = "Санкции";
				ИначеЕсли Выборка.КорСубконто1 = ОбщегоНазначенияКлиентСервер.ПредопределенныйЭлемент("Справочник.ПрочиеДоходыИРасходы.СуммовыеРазницы") Тогда
					Представление = "Суммовые разницы";
				ИначеЕсли Выборка.КорСубконто1 = ОбщегоНазначенияКлиентСервер.ПредопределенныйЭлемент("Справочник.ПрочиеДоходыИРасходы.КурсовыеРазницыПоРасчетамВУЕ") Тогда
					Представление = "Курсовые разницы по расчетам в у.е.";
				КонецЕсли;
				
			ИначеЕсли СчетаУчетаНДСпоАренднымОбязательствам.Найти(Выборка.КорСчет) <> Неопределено
				И Выборка.Дебет > 0 Тогда
				
				Представление = "Зачет НДС";
				
			КонецЕсли;
			
			Если НЕ ПустаяСтрока(Представление) Тогда
				// Строка уже отработана
				
			ИначеЕсли БухгалтерскийУчетПовтИсп.СчетВИерархии(Выборка.Счет, ПланыСчетов.Хозрасчетный.РасчетыПоКраткосрочнымКредитамИЗаймам) 
				ИЛИ БухгалтерскийУчетПовтИсп.СчетВИерархии(Выборка.Счет, ПланыСчетов.Хозрасчетный.РасчетыПоДолгосрочнымКредитамИЗаймам) Тогда
				
				Если Выборка.Дебет > 0 Тогда
					Представление = "Возврат займа";
				ИначеЕсли Выборка.Кредит > 0 Тогда
					Представление = "Займ";
				Иначе
					Представление = "Операции по займам";
				КонецЕсли;
				
			ИначеЕсли БухгалтерскийУчетПовтИсп.СчетВИерархии(Выборка.Счет, ПланыСчетов.Хозрасчетный.РасчетыПоПретензиям) 
				ИЛИ БухгалтерскийУчетПовтИсп.СчетВИерархии(Выборка.Счет, ПланыСчетов.Хозрасчетный.РасчетыПоПретензиямВал) 
				ИЛИ БухгалтерскийУчетПовтИсп.СчетВИерархии(Выборка.Счет, ПланыСчетов.Хозрасчетный.РасчетыПоПретензиямУЕ) Тогда
				
				Представление = "Претензия";
				
			ИначеЕсли БухгалтерскийУчетПовтИсп.СчетВИерархии(Выборка.КорСчет, ПланыСчетов.Хозрасчетный.Касса) 
				ИЛИ БухгалтерскийУчетПовтИсп.СчетВИерархии(Выборка.КорСчет, ПланыСчетов.Хозрасчетный.РасчетныеСчета) 
				ИЛИ БухгалтерскийУчетПовтИсп.СчетВИерархии(Выборка.КорСчет, ПланыСчетов.Хозрасчетный.ВалютныеСчета) 
				ИЛИ БухгалтерскийУчетПовтИсп.СчетВИерархии(Выборка.КорСчет, ПланыСчетов.Хозрасчетный.СпециальныеСчета) Тогда
				
				Если (Выборка.Кредит >0) Тогда
					
					Если БухгалтерскийУчетПовтИсп.СчетВИерархии(Выборка.Счет, ПланыСчетов.Хозрасчетный.РасчетыСПоставщикамиИПодрядчиками) Тогда
						Представление = "Возврат средств";
						
					ИначеЕсли БухгалтерскийУчетПовтИсп.СчетВИерархии(Выборка.Счет, ПланыСчетов.Хозрасчетный.РасчетыСПокупателямиИЗаказчиками) Тогда
						Представление = "Оплата";
						
					Иначе
						Представление = "Перевод средств";
					КонецЕсли;
					
				ИначеЕсли (Выборка.Дебет >0) Тогда
					Если БухгалтерскийУчетПовтИсп.СчетВИерархии(Выборка.Счет, ПланыСчетов.Хозрасчетный.РасчетыСПоставщикамиИПодрядчиками)
						ИЛИ БухгалтерскийУчетПовтИсп.СчетВИерархии(Выборка.Счет, ПланыСчетов.Хозрасчетный.РасчетыСРазнымиДебиторамиИКредиторами) Тогда
						
						Представление = "Оплата";
						
					ИначеЕсли БухгалтерскийУчетПовтИсп.СчетВИерархии(Выборка.Счет, ПланыСчетов.Хозрасчетный.РасчетыСПокупателямиИЗаказчиками) Тогда
						Представление = "Возврат средств";
						
					Иначе
						Представление = "Перевод средств";
					КонецЕсли;
				КонецЕсли;
				
			ИначеЕсли ТипЗнч(Выборка.Документ) = Тип("ДокументСсылка.КорректировкаПоступления") Тогда
				Представление = "Корректировка прихода";
			ИначеЕсли ТипЗнч(Выборка.Документ) = Тип("ДокументСсылка.КорректировкаРеализации") Тогда
				Представление = "Корректировка продажи";
			ИначеЕсли БухгалтерскийУчетПовтИсп.СчетВИерархии(Выборка.КорСчет, ПланыСчетов.Хозрасчетный.Продажи) И (Выборка.Дебет > 0) Тогда
				Представление = "Продажа";
			ИначеЕсли БухгалтерскийУчетПовтИсп.СчетВИерархии(Выборка.КорСчет, ПланыСчетов.Хозрасчетный.ПрочиеДоходыИРасходы) 
				И НЕ БухгалтерскийУчетПовтИсп.СчетВИерархии(Выборка.Счет, ПланыСчетов.Хозрасчетный.РасчетыСПоставщикамиИПодрядчиками) 
				И (Выборка.Дебет > 0) Тогда
				Представление = "Продажа";
			ИначеЕсли (БухгалтерскийУчетПовтИсп.СчетВИерархии(Выборка.Счет, ПланыСчетов.Хозрасчетный.РасчетыСПоставщикамиИПодрядчиками) 
				ИЛИ БухгалтерскийУчетПовтИсп.СчетВИерархии(Выборка.Счет, ПланыСчетов.Хозрасчетный.РасчетыСРазнымиДебиторамиИКредиторами))
				И (Выборка.Кредит <> 0) Тогда
				Представление = "Приход";
			ИначеЕсли БухгалтерскийУчетПовтИсп.СчетВИерархии(Выборка.Счет, ПланыСчетов.Хозрасчетный.РасчетыСПокупателямиИЗаказчиками) Тогда
				Если ТипЗнч(Выборка.Документ) = Тип("ДокументСсылка.РеализацияТоваровУслуг") И Выборка.Дебет <> 0 Тогда
					Представление = "Продажа";
				ИначеЕсли (Выборка.Кредит <> 0) Тогда
					Представление = "Оплата";
				КонецЕсли;
			КонецЕсли;
			
			Если ПустаяСтрока(Представление)Тогда
				Если Выборка.Дебет > 0 Тогда
					Представление = "Принято";
				ИначеЕсли Выборка.Дебет < 0 Тогда
					Представление = "Сторно: принято";
				ИначеЕсли Выборка.Кредит > 0 Тогда
					Представление = "Передано";
				Иначе
					Представление = "Сторно: передано";
				КонецЕсли;
			КонецЕсли;
			
			Если Выборка.НомерВходящегоДокумента = Неопределено Тогда
				Если Представление = "Продажа" И ТипЗнч(Выборка.Документ) <> Тип("ДокументСсылка.ОперацияБух") Тогда
					Представление = Представление + " (" + ПрефиксацияОбъектовКлиентСервер.НомерНаПечать(Выборка.Номер, Истина, Ложь) 
						+ " от " + Формат(Выборка.Дата, "ДФ=dd.MM.yyyy") + ")";
				Иначе
					Представление = Представление + " ("+Формат(Выборка.Дата, "ДФ=dd.MM.yyyy") + ")";
				КонецЕсли;
			ИначеЕсли (Выборка.НомерВходящегоДокумента = "" И Представление = "Оплата") Или  СтрНайти(Представление, "разницы") > 0 Тогда
				Представление = Представление + " (" + Формат(Выборка.Дата, "ДФ=dd.MM.yyyy")+")";
			Иначе
				Представление = Представление + " (" 
					+ ?(НЕ ЗначениеЗаполнено(Выборка.НомерВходящегоДокумента),"_______", 
					Выборка.НомерВходящегоДокумента) + " от " 
					+ ?(НЕ ЗначениеЗаполнено(Выборка.ДатаВходящегоДокумента), 
					"'  .  .    '", 
					Формат(Выборка.ДатаВходящегоДокумента, "ДФ=dd.MM.yyyy"))+")";
			КонецЕсли;
			
		КонецЕсли;
		
		// Добавим к представлению документа данные счета-фактуры. "Сверка_"
		Если СтруктураПараметров.ВыводитьНомераСчетовФактур Тогда
			Представление = Представление + НадписьПроСчетФактуру(Выборка.СчетФактура, Выборка.ВидСчетаФактуры);
		КонецЕсли;
		
		НоваяСтрока.Представление = Представление;

	КонецЦикла;
	
	Запрос.УстановитьПараметр("ДатаНачала", СтруктураПараметров.ДатаНачалаИсключая);
	
	Запрос.Текст = 
	?(НЕ ЗначениеЗаполнено(СтруктураПараметров.ДатаНачалаИсключая), 
	"ВЫБРАТЬ
	|	0 КАК ОстатокНаНачало, 
	|	0 КАК ОстатокНаКонец", 
	
	"ВЫБРАТЬ
	|	ВЫБОР
	|		КОГДА &Валюта = НЕОПРЕДЕЛЕНО
	|			ТОГДА ХозрасчетныйОстаткиНаНачало.СуммаОстаток
	|		ИНАЧЕ ХозрасчетныйОстаткиНаНачало.ВалютнаяСуммаОстаток
	|	КОНЕЦ КАК ОстатокНаНачало,
	|	0 КАК ОстатокНаКонец
	|ИЗ
	|	РегистрБухгалтерии.Хозрасчетный.Остатки(
	|			&ДатаНачала,
	|			Счет В
	|				(ВЫБРАТЬ
	|					ФильтрСписокСчетов.Счет
	|				ИЗ
	|					ФильтрСписокСчетов),
	|			&АналитикаРасчетов,
	|			Организация = &Организация
	|				И ВЫБОР
	|					КОГДА &Валюта = НЕОПРЕДЕЛЕНО
	|						ТОГДА ИСТИНА
	|					ИНАЧЕ Валюта = &Валюта
	|				КОНЕЦ
	|				И ВЫБОР
	|					КОГДА &ВключатьОбособленные
	|						ТОГДА Субконто1 В
	|								(ВЫБРАТЬ
	|									Контрагенты.Контрагент
	|								ИЗ
	|									Контрагенты)
	|					ИНАЧЕ Субконто1 = &Контрагент
	|				КОНЕЦ
	|				И ВЫБОР
	|					КОГДА &ДоговорКонтрагента = НЕОПРЕДЕЛЕНО
	|						ТОГДА ИСТИНА
	|					ИНАЧЕ Субконто2 В
	|							(ВЫБРАТЬ
	|								ДоговораКонтрагента.Договор
	|							ИЗ
	|								ДоговораКонтрагента)
	|				КОНЕЦ) КАК ХозрасчетныйОстаткиНаНачало");
	
	Запрос.Текст = Запрос.Текст + 
	"
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|";
	
	Запрос.Текст = Запрос.Текст +
	"ВЫБРАТЬ
	|	0 КАК ОстатокНаНачало,
	|	ВЫБОР
	|		КОГДА &Валюта = НЕОПРЕДЕЛЕНО
	|			ТОГДА ХозрасчетныйОстаткиНаНачало.СуммаОстаток
	|		ИНАЧЕ ХозрасчетныйОстаткиНаНачало.ВалютнаяСуммаОстаток
	|	КОНЕЦ КАК ОстатокНаКонец
	|ИЗ
	|	РегистрБухгалтерии.Хозрасчетный.Остатки(
	|			&ДатаОкончания,
	|			Счет В
	|				(ВЫБРАТЬ
	|					ФильтрСписокСчетов.Счет
	|				ИЗ
	|					ФильтрСписокСчетов),
	|			&АналитикаРасчетов,
	|			Организация = &Организация
	|				И ВЫБОР
	|					КОГДА &Валюта = НЕОПРЕДЕЛЕНО
	|						ТОГДА ИСТИНА
	|					ИНАЧЕ Валюта = &Валюта
	|				КОНЕЦ
	|				И ВЫБОР
	|					КОГДА &ВключатьОбособленные
	|						ТОГДА Субконто1 В
	|								(ВЫБРАТЬ
	|									Контрагенты.Контрагент
	|								ИЗ
	|									Контрагенты)
	|					ИНАЧЕ Субконто1 = &Контрагент
	|				КОНЕЦ
	|				И ВЫБОР
	|					КОГДА &ДоговорКонтрагента = НЕОПРЕДЕЛЕНО
	|						ТОГДА ИСТИНА
	|					ИНАЧЕ Субконто2 В
	|							(ВЫБРАТЬ
	|								ДоговораКонтрагента.Договор
	|							ИЗ
	|								ДоговораКонтрагента)
	|				КОНЕЦ) КАК ХозрасчетныйОстаткиНаНачало
	|ИТОГИ
	|	СУММА(ОстатокНаНачало),
	|	СУММА(ОстатокНаКонец)
	|ПО
	|	ОБЩИЕ";
	
	Выборка = Запрос.Выполнить().Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам, "ОБЩИЕ");
	Выборка.Следующий();
	СтруктураДанныхЗаполнения.Вставить("ОстатокНаНачало", Выборка.ОстатокНаНачало);
	ОстатокНаКонец  = Выборка.ОстатокНаКонец;
	
	Если СтруктураПараметров.ВалютаДокумента = СтруктураПараметров.ВалютаРегламентированногоУчета 
		И НЕ СтруктураПараметров.ВыводитьПолныеНазванияДокументов  Тогда
		
		ТаблицаПоДаннымОрганизации.Свернуть("Дата,Документ,Представление,Договор,Валюта", "Дебет, Кредит, ВалютнаяСумма");
		
		Для каждого СтрокаДвижений Из ТаблицаПоДаннымОрганизации Цикл
			Если СтрокаДвижений.ВалютнаяСумма >0 Тогда
				
				СтрокаДвижений.Представление = СтрокаДвижений.Представление+" ("+Формат(СтрокаДвижений.ВалютнаяСумма, "ЧЦ=15; ЧДЦ=2")+" "+строка(СтрокаДвижений.Валюта) +")";
			ИначеЕсли СтрокаДвижений.ВалютнаяСумма <0 Тогда
				Множитель = ?(СтрокаДвижений.Дебет + СтрокаДвижений.Кредит>0, -1,1);
				
				СтрокаДвижений.Представление = СтрокаДвижений.Представление+" ("+Формат(Множитель*СтрокаДвижений.ВалютнаяСумма, "ЧЦ=15; ЧДЦ=2")+" "+строка(СтрокаДвижений.Валюта) +")";
	
			КонецЕсли;
		КонецЦикла; 
		
	Иначе
		ТаблицаПоДаннымОрганизации.Свернуть("Дата,Документ,Представление,Договор","Дебет, Кредит");	
	КонецЕсли; 
	
	Если СтруктураПараметров.ВыводитьПолныеНазванияДокументов Тогда	
		ТаблицаПоДаннымОрганизации.Свернуть("Дата,Документ,Представление,Договор","Дебет, Кредит");
	КонецЕсли;

	Если СтруктураПараметров.РазбитьПоДоговорам Тогда
		ТаблицаПоДаннымОрганизации.Сортировать("Договор, Дата, Документ, Представление", Новый СравнениеЗначений);
	Иначе
		ТаблицаПоДаннымОрганизации.Сортировать("Дата, Документ, Представление, Договор", Новый СравнениеЗначений);
	КонецЕсли;
	
	УстановитьПривилегированныйРежим(Ложь);
	
	СтруктураДанныхЗаполнения.Вставить("ПоДаннымОрганизации", ТаблицаПоДаннымОрганизации);
	
	ПоместитьВоВременноеХранилище(СтруктураДанныхЗаполнения, АдресХранилища);
	
КонецПроцедуры

Функция НадписьПроСчетФактуру(СчетФактура, ВидСчетаФактуры)

	Если ВидСчетаФактуры = "Выданный" Тогда
		РеквизитыСФ = УчетНДСВызовСервера.РеквизитыДляНадписиОСчетеФактуреВыданном(СчетФактура);
	Иначе
		РеквизитыСФ = УчетНДСВызовСервера.РеквизитыДляНадписиОСчетеФактуреПолученном(СчетФактура);
	КонецЕсли;

	Если РеквизитыСФ = Неопределено Тогда
		НадписьСчетФактура = "";
	Иначе
		НадписьСчетФактура = Символы.ПС + "Счет-фактура (" + РеквизитыСФ.КраткоеПредставление + ")";
	КонецЕсли;
	
	Возврат НадписьСчетФактура;

КонецФункции

// Расширение. "Сверка_"
// Одноименная процедура заимствована из Модуля менеджера документа "АктСверкиВзаиморасчетов"
// Сделано по причине того, что эта процедура не экспортная.
//
Функция ПолучитьМетаданныеДокумента(Знач ДокументСсылка, КэшМетаданных)
	
	МетаданныеДокумента = КэшМетаданных[ТипЗнч(ДокументСсылка)];
	
	Если МетаданныеДокумента = Неопределено Тогда
		МетаданныеДокумента = ДокументСсылка.Метаданные();
		КэшМетаданных.Вставить(ТипЗнч(ДокументСсылка), МетаданныеДокумента);
	КонецЕсли; 
	
    Возврат МетаданныеДокумента;
	
КонецФункции

Функция ПроверитьОтложенныеРасчеты(СтруктураПараметров)

	ДатаОкончания = СтруктураПараметров.ДатаОкончания;
	Если ТипЗнч(ДатаОкончания) = Тип("Граница") Тогда
		ДатаОкончания = ДатаОкончания.Значение;
	КонецЕсли;

	ПараметрыРасчета = УчетВзаиморасчетовОтложенноеПроведение.НовыеПараметрыРасчета();
	ЗаполнитьЗначенияСвойств(ПараметрыРасчета, СтруктураПараметров);
	ПараметрыРасчета.ДатаОкончания 	= ДатаОкончания;
	
	Результат = УчетВзаиморасчетовОтложенноеПроведение.ВыполнитьОтложенныеРасчеты(ПараметрыРасчета);
	
	Возврат Результат.КоличествоДоговоровСОшибками = 0;

КонецФункции

#КонецОбласти

#Область Печать

// Сформировать печатные формы объектов
//Параметры:
//   МассивОбъектов  - Массив    - Массив ссылок на объекты которые нужно распечатать
//   ПараметрыПечати - Структура - Структура дополнительных параметров печати,
//   КоллекцияПечатныхФорм - ТаблицаЗначений - Сформированные табличные документы
//   ОбъектыПечати - Массив -  массив объектов печать
//   ПараметрыВывода - Структура - Параметры сформированных табличных документов
//
Процедура Печать(МассивОбъектов, ПараметрыПечати, КоллекцияПечатныхФорм, ОбъектыПечати, ПараметрыВывода) Экспорт
	
	Таблица = ПолучитьИзВременногоХранилища(ПараметрыПечати.ПечатнаяФормаАктаСверки);
	УправлениеПечатью.ВывестиТабличныйДокументВКоллекцию(КоллекцияПечатныхФорм, "АктСверки", "Акт сверки взаиморасчетов", Таблица);
	
	ОбщегоНазначенияБП.ЗаполнитьДополнительныеПараметрыПечати(МассивОбъектов, КоллекцияПечатныхФорм, ОбъектыПечати, ПараметрыВывода);
	
КонецПроцедуры

Функция ПечатьАктаСверки(МассивДокументов, СПечатью = Ложь)

	// Расширение. "Сверка_"
	// Одноименная процедура заимствована из Модуля менеджера документа "АктСверкиВзаиморасчетов"
	// Типовой код оставлен для совместимости - в случае, если в типовой поменяется, легко изменить в расширении.
	//
	// Список изменений в расширении:
	// 1. Получаем ДопМакет, в котором хранятся области для вывода начальных и конечных остатков по договору
	// 2. Получаем остатки по договорам для конкретного документа
	// 3. Выводим остатки в соответствующие области, в случае если необходимо разбить по договорам
	// 4. Конечные остатки получаем сложением начальных остатков и оборотов по договору
	// 5. Остальное типовой код см. Документ.АктСверкиВзаиморасчетов.ПечатьАктаСверки()

	УстановитьПривилегированныйРежим(Истина);
	
	ТабличныйДокумент = Новый ТабличныйДокумент;
	ТабличныйДокумент.АвтоМасштаб             = Истина;
	ТабличныйДокумент.РазмерКолонтитулаСверху = 0;
	ТабличныйДокумент.РазмерКолонтитулаСнизу  = 0;
	ТабличныйДокумент.ОриентацияСтраницы      = ОриентацияСтраницы.Ландшафт;
	ТабличныйДокумент.ИмяПараметровПечати     = "ПАРАМЕТРЫ_ПЕЧАТИ_АктСверкиВзаиморасчетов";
	
	Макет    = УправлениеПечатью.МакетПечатнойФормы("Документ.АктСверкиВзаиморасчетов.ПФ_MXL_АктСверки");
	// Получим макет, где находятся дополнительные строки для отображения начальных и конечных остатков по договорам. "Сверка_"
	ДопМакет = УправлениеПечатью.МакетПечатнойФормы("Обработка.Сверка_СлужебнаяОбработка.Расширение_ПФ_MXL_АктСверки");
	
	// Проверим есть ли нужная область макета. Если область не найдена, то используем старый макет.
	Если СПечатью И НЕ ЗначениеЗаполнено(Макет.Области.Найти("ПодвалСПечатьюИПодписью")) Тогда
		СПечатью = Ложь;
	КонецЕсли;
	
	// Получим валюту регламентированного учета "Сверка_"
	ВалютаРегламентированногоУчета = ОбщегоНазначенияБПВызовСервераПовтИсп.ПолучитьВалютуРегламентированногоУчета();
	
	Запрос = Новый Запрос();
	Запрос.УстановитьПараметр("МассивДокументов", МассивДокументов);
	Запрос.Текст = ПолучитьТекстЗапросаДляФормированияПечатнойФормыАктСверки();
	
	Шапка = Запрос.Выполнить().Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам, "АктСверки");
	
	ПервыйДокумент = Истина;
	
	Пока Шапка.Следующий() Цикл
		
		Если Не ПервыйДокумент Тогда
			ТабличныйДокумент.ВывестиГоризонтальныйРазделительСтраниц();
		КонецЕсли;
		
		ПервыйДокумент = Ложь;
		// Запомним номер строки, с которой начали выводить текущий документ.
		НомерСтрокиНачало = ТабличныйДокумент.ВысотаТаблицы + 1;
		
		// Получаем области:
		ОбластьЗаголовок            = Макет.ПолучитьОбласть("Заголовок");
		ОбластьШапкаТаблицы         = Макет.ПолучитьОбласть("ШапкаТаблицы");
		ОбластьНачОстатки           = Макет.ПолучитьОбласть("НачОстатки");
		ОбластьДоговор              = Макет.ПолучитьОбласть("Договор");
		ОбластьДоговорИтоги         = Макет.ПолучитьОбласть("ДоговорИтоги");
		ОбластьОбороты              = Макет.ПолучитьОбласть("Обороты");
		ОбластьОборотыИтог          = Макет.ПолучитьОбласть("ОборотыИтог");
		ОбластьКонОстатки           = Макет.ПолучитьОбласть("КонОстатки");
		ОбластьПодвал               = Макет.ПолучитьОбласть("Подвал");
		Если СПечатью И Макет.Области.Найти("ПодвалСПечатьюИПодписью") <> Неопределено Тогда
			ОбластьПодвал           = Макет.ПолучитьОбласть("ПодвалСПечатьюИПодписью");
		Иначе
			ОбластьПодвал           = Макет.ПолучитьОбласть("Подвал");
		КонецЕсли;
		
		// Получим области для дополнительных строк по остаткам. "Сверка_"
		ОбластьНачОстаткиПоДоговору = ДопМакет.ПолучитьОбласть("НачОстаткиПоДоговору");
		ОбластьКонОстаткиПоДоговору = ДопМакет.ПолучитьОбласть("КонОстаткиПоДоговору");
		
		// Переопределим область с макетами, потому что будем выводить строку "Сверка_"
		ОбластьКонОстатки           = ДопМакет.ПолучитьОбласть("КонОстатки");
		
		// Получаем остатки по договорам. "Сверка_"
		ОстаткиПоДоговорам = ОстаткиПоДоговорам(Шапка, Шапка.ВалютаДокумента <> ВалютаРегламентированногоУчета);
		
		// Заполняем шапку:
		ПараметрыЗаголовок = Новый Структура;

		СведенияОбОрганизации    = БухгалтерскийУчетПереопределяемый.СведенияОЮрФизЛице(Шапка.Организация, Шапка.ДатаАктаСверки);
		ПредставлениеОрганизации = ОбщегоНазначенияБПВызовСервера.ОписаниеОрганизации(СведенияОбОрганизации, "НаименованиеДляПечатныхФорм,");
		
		СведенияОКонтрагенте     = БухгалтерскийУчетПереопределяемый.СведенияОЮрФизЛице(Шапка.Контрагент, Шапка.ДатаАктаСверки);
		ПредставлениеКонтрагента = ОбщегоНазначенияБПВызовСервера.ОписаниеОрганизации(СведенияОКонтрагенте, "НаименованиеДляПечатныхФорм,");
		
		ПараметрыЗаголовок.Вставить("НазваниеОрганизации",     ПредставлениеОрганизации);
		ПараметрыЗаголовок.Вставить("НаименованиеКонтрагента", ПредставлениеКонтрагента);
		
		ДатаНачалаОтчета = ?(ЗначениеЗаполнено(Шапка.ДатаНачала), Шапка.ДатаНачала, Шапка.МинДата);

		ОписаниеПериода = ?(ЗначениеЗаполнено(ДатаНачалаОтчета),"за период: " + ПредставлениеПериода(НачалоДня( ДатаНачалаОтчета), КонецДня( Шапка.ДатаОкончания), "ФП = Истина"),"");
		
		ТекстЗаголовка = "взаимных расчетов " + ОписаниеПериода  + Символы.ПС
						+ "между " + ПредставлениеОрганизации + Символы.ПС + "и " + ПредставлениеКонтрагента;
		ДоговорКонтрагента = Шапка.ДоговорКонтрагентаВШапке;
		Если ЗначениеЗаполнено(ДоговорКонтрагента) И НЕ ДоговорКонтрагента.ЭтоГруппа Тогда
			ТекстЗаголовка = ТекстЗаголовка + Символы.ПС + "по договору " + ДоговорКонтрагента;
		КонецЕсли;
		
		ПараметрыЗаголовок.Вставить("ТекстЗаголовка", ТекстЗаголовка);
		
		ДанныеПредставителяОрганизации = ОбщегоНазначенияБПВызовСервера.ДанныеФизЛица(Шапка.Организация, Шапка.ПредставительОрганизации, Шапка.ДатаАктаСверки);
		ДанныеПредставителяКонтрагента = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(Шапка.ПредставительКонтрагента, "Должность, Фамилия, Имя, Отчество");
		ФИОПредставителя = ?(НЕ ЗначениеЗаполнено(ДанныеПредставителяОрганизации.Фамилия), "",ДанныеПредставителяОрганизации.Фамилия
						+ ?(НЕ ЗначениеЗаполнено(ДанныеПредставителяОрганизации.Имя), "", " "+ ДанныеПредставителяОрганизации.Имя)
						+ ?(НЕ ЗначениеЗаполнено(ДанныеПредставителяОрганизации.Отчество), "", " "+ ДанныеПредставителяОрганизации.Отчество));
		
		// "Сверка_" - Параметр СтрЗаголовокТаблица оставлен для совместимости с 3.0.42
		СтрЗаголовокТаблица = "Мы, нижеподписавшиеся, " + ?(НЕ ЗначениеЗаполнено(ДанныеПредставителяОрганизации.Должность),
			"________________", ДанныеПредставителяОрганизации.Должность) + " " + ПредставлениеОрганизации
			+ " " + ?(ФИОПредставителя <> "", ФИОПредставителя, "_______________________") + ", с одной стороны, "
			+ "и " + ?(НЕ ЗначениеЗаполнено(Шапка.ПредставительКонтрагента) ИЛИ НЕ ЗначениеЗаполнено(ДанныеПредставителяКонтрагента.Должность),
			"________________", ДанныеПредставителяКонтрагента.Должность)
			+ " " + ПредставлениеКонтрагента + " " + ?(НЕ ЗначениеЗаполнено(Шапка.ПредставительКонтрагента),
			"_______________________", Шапка.ПредставительКонтрагента) + ", с другой стороны, "
			+ "составили настоящий акт сверки в том, что состояние взаимных расчетов по данным учета следующее:";
		ПараметрыЗаголовок.Вставить("СтрЗаголовокТаблица", СтрЗаголовокТаблица);
		
		ТекстНетФИО       = "_______________________";
		ТекстНетДолжности = "________________";
		
		ПараметрыПредставители = Новый Структура;
		
		// Представитель организации
		ФИОПредставителя = 
			?(НЕ ЗначениеЗаполнено(ДанныеПредставителяОрганизации.Фамилия), ТекстНетФИО, ДанныеПредставителяОрганизации.Фамилия
			+ ?(НЕ ЗначениеЗаполнено(ДанныеПредставителяОрганизации.Имя), "", " " + ДанныеПредставителяОрганизации.Имя)
			+ ?(НЕ ЗначениеЗаполнено(ДанныеПредставителяОрганизации.Отчество), "", " " + ДанныеПредставителяОрганизации.Отчество));
		
		ДолжностьПредставителяОрганизации = Строка(ДанныеПредставителяОрганизации.Должность);
		Если НЕ ЗначениеЗаполнено(ДолжностьПредставителяОрганизации) Тогда
			ДолжностьПредставителяОрганизации = ТекстНетДолжности;
		КонецЕсли;
		
		ПараметрыЗаголовок.Вставить("ПредставительОрганизации",
			ДолжностьПредставителяОрганизации + " " + ПредставлениеОрганизации + " " + ФИОПредставителя);
		
		// Представитель контрагента
		ФИОПредставителяКонтрагента =
			?(НЕ ЗначениеЗаполнено(ДанныеПредставителяКонтрагента.Фамилия), ТекстНетФИО, ДанныеПредставителяКонтрагента.Фамилия
			+ ?(НЕ ЗначениеЗаполнено(ДанныеПредставителяКонтрагента.Имя), "", " " + ДанныеПредставителяКонтрагента.Имя)
			+ ?(НЕ ЗначениеЗаполнено(ДанныеПредставителяКонтрагента.Отчество), "", " " + ДанныеПредставителяКонтрагента.Отчество));
		
		ДолжностьПредставителяКонтрагента = Строка(ДанныеПредставителяКонтрагента.Должность);
		Если НЕ ЗначениеЗаполнено(ДолжностьПредставителяКонтрагента) Тогда
			ДолжностьПредставителяКонтрагента = ТекстНетДолжности;
		КонецЕсли;
		
		ПараметрыЗаголовок.Вставить("ПредставительКонтрагента",
			ДолжностьПредставителяКонтрагента + " " + ПредставлениеКонтрагента + " " + ФИОПредставителяКонтрагента);
		
		ПараметрыЗаголовок.Вставить("ВалютаДокумента", Шапка.ВалютаДокумента);
		ОбластьЗаголовок.Параметры.Заполнить(ПараметрыЗаголовок);
		
		ТабличныйДокумент.Вывести(ОбластьЗаголовок);
		ТабличныйДокумент.Вывести(ОбластьШапкаТаблицы);
		
		ОбластьНачОстатки.Параметры.СуммаНачальныйОстатокДт = ?(Шапка.ОстатокНаНачало > 0, Шапка.ОстатокНаНачало, 0);
		ОбластьНачОстатки.Параметры.СуммаНачальныйОстатокКт = ?(Шапка.ОстатокНаНачало < 0, -Шапка.ОстатокНаНачало, 0);
		ТабличныйДокумент.Вывести(ОбластьНачОстатки);
		
		ОборотыДт = Шапка.СуммаДогДт;
		ОборотыКт = Шапка.СуммаДогКт;
		ОборотыДтКонтр = Шапка.СуммаДогДтКонтр;
		ОборотыКтКонтр = Шапка.СуммаДогКтКонтр;
		
		ОбходПоДоговорам = Шапка.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам, "Договор");
		Пока ОбходПоДоговорам.Следующий() Цикл
			
			// Собираем данные
			ОбходПоДокументам = ОбходПоДоговорам.Выбрать();
			
			//Создадим список документов по организации и контрагенту
			СписокДокументов = новый массив;
			СписокДокументовК = новый массив;
			Пока ОбходПоДокументам.Следующий() Цикл
				Если ОбходПоДокументам.Дата<>NULL Тогда
					СписокДокументов.Добавить(новый структура("ДатаДокумента, РегистраторПредставление, Регистратор, СуммаОборотДт, СуммаОборотКт",
					ОбходПоДокументам.Дата,ОбходПоДокументам.Представление,ОбходПоДокументам.Документ,ОбходПоДокументам.СуммаДогДт,ОбходПоДокументам.СуммаДогКт));
				КонецЕсли;
				
				Если ОбходПоДокументам.ДатаК<>NULL Тогда
					СписокДокументовК.Добавить(новый структура("ДатаДокументаКонтр,РегистраторПредставлениеКонтр,СуммаОборотДтКонтр,СуммаОборотКтКонтр",
					ОбходПоДокументам.ДатаК,ОбходПоДокументам.ПредставлениеК,ОбходПоДокументам.СуммаДогДтКонтр,ОбходПоДокументам.СуммаДогКтКонтр));
				КонецЕсли;
			КонецЦикла;
			
			// Для того, чтобы не выводить остатки для ТЧ контрагента, если она не заполнена, 
			// сохраним информацию о том, есть ли данные в этой ТЧ "Сверка_"
			ЕстьДанныеПоКонтрагенту = (СписокДокументовК.Количество() > 0);
			
			//Для упрощения вывода, сравним списки по количеству элементов, добавив пустые
			МаксИндекс = Макс(СписокДокументов.Количество(), СписокДокументовК.Количество())-1;
			МинИндекс = Мин(СписокДокументов.Количество(), СписокДокументовК.Количество())-1;
			Если СписокДокументов.Количество() < СписокДокументовК.Количество() Тогда
				Для инд = МинИндекс По МаксИндекс-1 Цикл
					СписокДокументов.Добавить(новый структура("ДатаДокумента,РегистраторПредставление,Регистратор,СуммаОборотДт,СуммаОборотКт","","","","",""));
				КонецЦикла;
			ИначеЕсли СписокДокументов.Количество() > СписокДокументовК.Количество() Тогда 
				Для инд = МинИндекс По МаксИндекс-1 Цикл
					СписокДокументовК.Добавить(новый структура("ДатаДокументаКонтр,РегистраторПредставлениеКонтр,СуммаОборотДтКонтр,СуммаОборотКтКонтр","","","",""));
				КонецЦикла;
			КонецЕсли;
			
			// Выводим данные в табличный документ
			Если Шапка.РазбитьПоДоговорам И МаксИндекс > -1 Тогда
				//Выводим заголовок с договором 
				ОбластьДоговор.Параметры.Договор = ОбходПоДоговорам.Договор;
				ОбластьДоговор.Параметры.Регистратор = ОбходПоДоговорам.Договор;
				ТабличныйДокумент.Вывести(ОбластьДоговор);
				
				// Выводим начальные остатки по договорам. "Сверка_"
				ОстатокПоДоговору = Новый Структура;
				ОстатокПоДоговору.Вставить("НачОстатокПоДоговоруДт", 0);
				ОстатокПоДоговору.Вставить("НачОстатокПоДоговоруКт", 0);
				ОстатокПоДоговору.Вставить("НачОстатокПоДоговоруДтКонтр", 0);
				ОстатокПоДоговору.Вставить("НачОстатокПоДоговоруКтКонтр", 0);
				ОстатокПоДоговору.Вставить("КонОстатокПоДоговоруДт", 0);
				ОстатокПоДоговору.Вставить("КонОстатокПоДоговоруКт", 0);
				ОстатокПоДоговору.Вставить("КонОстатокПоДоговоруДтКонтр", 0);
				ОстатокПоДоговору.Вставить("КонОстатокПоДоговоруКтКонтр", 0);
				ОстатокПоДоговору.Вставить("Регистратор", ОбходПоДоговорам.Договор);
				СтрокиПоДоговору = ОстаткиПоДоговорам.НайтиСтроки(Новый Структура("Договор", ОбходПоДоговорам.Договор));
				Если СтрокиПоДоговору.Количество() <> 0 Тогда
					СтрокаПоДоговору = СтрокиПоДоговору[0];
					ЗаполнитьЗначенияСвойств(ОстатокПоДоговору, СтрокаПоДоговору);
					// В случае, если договор в условных единицах, то показываем еще и валютную задолженность
					Если СтрокаПоДоговору.РасчетыВУсловныхЕдиницах И Шапка.ВалютаДокумента = ВалютаРегламентированногоУчета Тогда
						Если СтрокаПоДоговору.НачВалОстатокПоДоговоруДт <> 0 Тогда
							ОстатокПоДоговору.НачОстатокПоДоговоруДт = СтрШаблон(НСтр("ru='%1 руб
								|%2 %3'"),
								Формат(ОстатокПоДоговору.НачОстатокПоДоговоруДт, "ЧЦ=21; ЧДЦ=2"),
								Формат(СтрокаПоДоговору.НачВалОстатокПоДоговоруДт, "ЧЦ=21; ЧДЦ=2"),
								СтрокаПоДоговору.Валюта);
						КонецЕсли;
						Если СтрокаПоДоговору.НачВалОстатокПоДоговоруКт <> 0 Тогда
							ОстатокПоДоговору.НачОстатокПоДоговоруКт = СтрШаблон(НСтр("ru='%1 руб
								|%2 %3'"),
								Формат(ОстатокПоДоговору.НачОстатокПоДоговоруКт, "ЧЦ=21; ЧДЦ=2"),
								Формат(СтрокаПоДоговору.НачВалОстатокПоДоговоруКт, "ЧЦ=21; ЧДЦ=2"),
								СтрокаПоДоговору.Валюта);
						КонецЕсли;
						Если СтрокаПоДоговору.КонВалОстатокПоДоговоруДт <> 0 Тогда
							ОстатокПоДоговору.КонОстатокПоДоговоруДт = СтрШаблон(НСтр("ru='%1 руб
								|%2 %3'"),
								Формат(ОстатокПоДоговору.КонОстатокПоДоговоруДт, "ЧЦ=21; ЧДЦ=2"),
								Формат(СтрокаПоДоговору.КонВалОстатокПоДоговоруДт, "ЧЦ=21; ЧДЦ=2"),
								СтрокаПоДоговору.Валюта);
						КонецЕсли;
						Если СтрокаПоДоговору.КонВалОстатокПоДоговоруКт <> 0 Тогда
							ОстатокПоДоговору.КонОстатокПоДоговоруКт = СтрШаблон(НСтр("ru='%1 руб
								|%2 %3'"),
								Формат(ОстатокПоДоговору.КонОстатокПоДоговоруКт, "ЧЦ=21; ЧДЦ=2"),
								Формат(СтрокаПоДоговору.КонВалОстатокПоДоговоруКт, "ЧЦ=21; ЧДЦ=2"),
								СтрокаПоДоговору.Валюта);
						КонецЕсли;
					КонецЕсли;
				КонецЕсли;
				Если ЕстьДанныеПоКонтрагенту > 0 Тогда
					ОстатокПоДоговору.НачОстатокПоДоговоруДтКонтр = ОстатокПоДоговору.НачОстатокПоДоговоруКт;
					ОстатокПоДоговору.НачОстатокПоДоговоруКтКонтр = ОстатокПоДоговору.НачОстатокПоДоговоруДт;
					ОстатокПоДоговору.КонОстатокПоДоговоруДтКонтр = ОстатокПоДоговору.КонОстатокПоДоговоруКт;
					ОстатокПоДоговору.КонОстатокПоДоговоруКтКонтр = ОстатокПоДоговору.КонОстатокПоДоговоруДт;
				КонецЕсли;
				ОбластьНачОстаткиПоДоговору.Параметры.Заполнить(ОстатокПоДоговору);
				ТабличныйДокумент.Вывести(ОбластьНачОстаткиПоДоговору);
				
			КонецЕсли;
			
			Для Инд = 0 По МаксИндекс Цикл
				// Выводим обороты
				ОбластьОбороты.Параметры.Заполнить(СписокДокументов[Инд]);
				ОбластьОбороты.Параметры.Заполнить(СписокДокументовК[Инд]);
				ТабличныйДокумент.Вывести(ОбластьОбороты);
			КонецЦикла;
			
			Если Шапка.РазбитьПоДоговорам И МаксИндекс > -1 Тогда
				//Выводим итоги по каждому договору
				ОбластьДоговорИтоги.Параметры.Заполнить(ОбходПоДоговорам);
				ТабличныйДокумент.Вывести(ОбластьДоговорИтоги);
				
				ОбластьКонОстаткиПоДоговору.Параметры.Заполнить(ОстатокПоДоговору);
				ТабличныйДокумент.Вывести(ОбластьКонОстаткиПоДоговору);
			КонецЕсли;
		КонецЦикла;
		
		// Получим валютную задолженность по договору "Сверка_"
		Если НЕ Шапка.РазбитьПоДоговорам 
			И ЗначениеЗаполнено(Шапка.ДоговорКонтрагентаВШапке) 
			И Шапка.ДоговорКонтрагентаВШапке.РасчетыВУсловныхЕдиницах 
			И Шапка.ВалютаДокумента = ВалютаРегламентированногоУчета Тогда
			СтрокаВалютнаяЗадолженностьПоДоговору = СтрокаВалютнаяЗадолженностьПоДоговору(Шапка);
		Иначе
			СтрокаВалютнаяЗадолженностьПоДоговору = "";
		КонецЕсли;

		ОбластьОборотыИтог.Параметры.СуммаОборотДт      = ОборотыДт;
		ОбластьОборотыИтог.Параметры.СуммаОборотКт      = ОборотыКт;
		Если Шапка.СверкаСогласована тогда
			ОбластьОборотыИтог.Параметры.СуммаОборотДтКонтр = ОборотыДтКонтр;
			ОбластьОборотыИтог.Параметры.СуммаОборотКтКонтр = ОборотыКтКонтр;
		КонецЕсли;
		ТабличныйДокумент.Вывести(ОбластьОборотыИтог);
		
		ОстатокНаКонец = Шапка.ОстатокНаНачало + ОборотыДт -  ОборотыКт;
		// "Сверка_" Выведем информацию о валютной задолженности в Сальдо конечное
		Если НЕ ПустаяСтрока(СтрокаВалютнаяЗадолженностьПоДоговору) Тогда
			СтрокаВалютнаяСальдоКонечное = СтрШаблон(НСтр("ru=' руб%1'"),
				СтрокаВалютнаяЗадолженностьПоДоговору);
		Иначе
			СтрокаВалютнаяСальдоКонечное = "";
		КонецЕсли;
			
		Если ОстатокНаКонец > 0 Тогда
			СтрокаОстатокНаКонецДт = СтрШаблон(НСтр("ru='%1%2'"),
				Формат(ОстатокНаКонец, "ЧЦ=21; ЧДЦ=2"),
				СтрокаВалютнаяСальдоКонечное);
		Иначе
			СтрокаОстатокНаКонецДт = 0;
		КонецЕсли;
		Если ОстатокНаКонец < 0 Тогда
			СтрокаОстатокНаКонецКт = СтрШаблон(НСтр("ru='%1%2'"),
				Формат(-ОстатокНаКонец, "ЧЦ=21; ЧДЦ=2"),
				СтрокаВалютнаяСальдоКонечное);
		Иначе
			СтрокаОстатокНаКонецКт = 0;
		КонецЕсли;
		
		ОбластьКонОстатки.Параметры.СуммаКонечныйОстатокДт = СтрокаОстатокНаКонецДт;
		ОбластьКонОстатки.Параметры.СуммаКонечныйОстатокКт = СтрокаОстатокНаКонецКт;
		
		Если Шапка.СверкаСогласована тогда
			ОстатокНаКонецК = Шапка.ОстатокНаНачало - ОборотыДтКонтр +  ОборотыКтКонтр;
			// "Сверка_" Выведем информацию о валютной задолженности в сальдо конечное по контрагенту
			Если ОстатокНаКонецК > 0 Тогда
				СтрокаОстатокНаКонецКтК = СтрШаблон(НСтр("ru='%1%2'"),
					Формат(ОстатокНаКонецК, "ЧЦ=21; ЧДЦ=2"),
					СтрокаВалютнаяСальдоКонечное);
			Иначе
				СтрокаОстатокНаКонецКтК = 0;
			КонецЕсли;
			Если ОстатокНаКонецК < 0 Тогда
				СтрокаОстатокНаКонецДтК = СтрШаблон(НСтр("ru='%1%2'"),
					Формат(-ОстатокНаКонецК, "ЧЦ=21; ЧДЦ=2"),
					СтрокаВалютнаяСальдоКонечное);
			Иначе
				СтрокаОстатокНаКонецДтК = 0;
			КонецЕсли;
			ОбластьКонОстатки.Параметры.СуммаКонечныйОстатокКтКонтр = СтрокаОстатокНаКонецКтК;
			ОбластьКонОстатки.Параметры.СуммаКонечныйОстатокДтКонтр = СтрокаОстатокНаКонецДтК;
		КонецЕсли;
		
		ТабличныйДокумент.Вывести(ОбластьКонОстатки);
		
		// Результаты сверки
		Если НЕ ЗначениеЗаполнено(Шапка.ДатаОкончания) Тогда
			РезультатыСверки = "<не указана дата сверки>";
		ИначеЕсли НЕ ЗначениеЗаполнено(Шапка.Контрагент) Тогда
			РезультатыСверки = "<не указан контрагент>";
		Иначе
			РезультатыСверки = "на " + Формат(Шапка.ДатаОкончания, "ДФ=dd.MM.yyyy") + " задолженность ";
				
			Если ОстатокНаКонец > 0 Тогда
				РезультатыСверки = РезультатыСверки + "в пользу " + ПредставлениеОрганизации + " " 
									+ Формат(ОстатокНаКонец, "ЧЦ=21; ЧДЦ=2") + " " 
									+ строка(Шапка.ВалютаДокумента)
									+" ("+УчетДенежныхСредствБП.ФорматироватьСуммуПрописьюПлатежногоДокумента(ОстатокНаКонец, Шапка.ВалютаДокумента,Ложь) + ")"
									+ СтрокаВалютнаяЗадолженностьПоДоговору; // "Сверка_"
									
		
			ИначеЕсли ОстатокНаКонец < 0 Тогда
				РезультатыСверки = РезультатыСверки + "в пользу " + ПредставлениеКонтрагента + " " 
									+ Формат(-ОстатокНаКонец, "ЧЦ=21; ЧДЦ=2") + " " 
									+ строка(Шапка.ВалютаДокумента)
									+" ("+УчетДенежныхСредствБП.ФорматироватьСуммуПрописьюПлатежногоДокумента(-ОстатокНаКонец, Шапка.ВалютаДокумента,Ложь) + ")"
									+ СтрокаВалютнаяЗадолженностьПоДоговору; // "Сверка_"
		
			Иначе
				РезультатыСверки = РезультатыСверки + "отсутствует.";
			КонецЕсли;
		КонецЕсли;
		ОбластьПодвал.Параметры.РезультатыСверки = РезультатыСверки;
		
		Если Шапка.СверкаСогласована тогда
			ОбластьПодвал.Параметры.ПоДаннымКонтрагента = "По данным " + ПредставлениеКонтрагента;
			
			Если НЕ ЗначениеЗаполнено(Шапка.ДатаОкончания) Тогда
				РезультатыСверки = "<не указана дата сверки>";
			ИначеЕсли НЕ ЗначениеЗаполнено(Шапка.Контрагент) Тогда
				РезультатыСверки = "<не указан контрагент>";
			Иначе
				РезультатыСверки = "на " + Формат(Шапка.ДатаОкончания, "ДФ=dd.MM.yyyy") + " задолженность ";
					
				Если ОстатокНаКонецК > 0 Тогда
					РезультатыСверки = РезультатыСверки + "в пользу " + ПредставлениеОрганизации + " " 
										+ Формат(ОстатокНаКонецК, "ЧЦ=21; ЧДЦ=2") + " " 
										+ строка(Шапка.ВалютаДокумента)
										+ " ("+УчетДенежныхСредствБП.ФорматироватьСуммуПрописьюПлатежногоДокумента(ОстатокНаКонецК, Шапка.ВалютаДокумента,Ложь)+")"
										+ СтрокаВалютнаяЗадолженностьПоДоговору; // "Сверка_"
				ИначеЕсли ОстатокНаКонецК < 0 Тогда
					РезультатыСверки = РезультатыСверки + "в пользу " + ПредставлениеКонтрагента + " " 
										+ Формат(-ОстатокНаКонецК, "ЧЦ=21; ЧДЦ=2") + " " 
										+ строка(Шапка.ВалютаДокумента)
										+" ("+УчетДенежныхСредствБП.ФорматироватьСуммуПрописьюПлатежногоДокумента(-ОстатокНаКонецК, Шапка.ВалютаДокумента,Ложь)+")"
										+ СтрокаВалютнаяЗадолженностьПоДоговору; // "Сверка_"
			
				Иначе
					РезультатыСверки = РезультатыСверки + "отсутствует.";
				КонецЕсли;
			КонецЕсли;
			
			ОбластьПодвал.Параметры.РезультатыСверкиК = РезультатыСверки;
			
			Если Шапка.Расхождение <> 0 Тогда
				ИтогСверки = "В результате сверки выявлено расхождение информации о состоянии расчетов в размере "
							+ Формат(?(Шапка.Расхождение > 0, 1, -1) * Шапка.Расхождение, "ЧЦ=21; ЧДЦ=2") 
							+ " "+ Строка(Шапка.ВалютаДокумента)
							+ " ("+УчетДенежныхСредствБП.ФорматироватьСуммуПрописьюПлатежногоДокумента(
							?(Шапка.Расхождение > 0, 1, -1) * Шапка.Расхождение, Шапка.ВалютаДокумента, Ложь)+")" ;
				ОбластьПодвал.Параметры.ИтогСверки = Символы.ПС + ИтогСверки+Символы.ПС+" ";
			КонецЕсли;
		КонецЕсли;
		
		ОбластьПодвал.Параметры.НазваниеОрганизации     = ПредставлениеОрганизации;
		ОбластьПодвал.Параметры.НаименованиеКонтрагента = ПредставлениеКонтрагента;
		
		ОбластьПодвал.Параметры.Должность  = ?(НЕ ЗначениеЗаполнено(ДанныеПредставителяОрганизации.Должность),
			"________________", ДанныеПредставителяОрганизации.Должность);
		ОбластьПодвал.Параметры.ДолжностьК = ?(НЕ ЗначениеЗаполнено(ДанныеПредставителяКонтрагента.Должность),
			"________________", ДанныеПредставителяКонтрагента.Должность);
		
		ОбластьПодвал.Параметры.ФИОПредставителя  = "("+?(НЕ ЗначениеЗаполнено(ДанныеПредставителяОрганизации),
			"_______________________",ДанныеПредставителяОрганизации.Представление)+")";
			
		ОбластьПодвал.Параметры.ФИОПредставителяК = "("+?(НЕ ЗначениеЗаполнено(Шапка.ПредставительКонтрагента),
			"_______________________",ФизическиеЛицаКлиентСервер.ФамилияИнициалы(
			ДанныеПредставителяКонтрагента.Фамилия + " " + ДанныеПредставителяКонтрагента.Имя + " " + ДанныеПредставителяКонтрагента.Отчество))+")";
			
		Если СПечатью Тогда
				ДвоичныеДанныеПечать = Справочники.Организации.ДвоичныеДанныеКартинкиОрганизации(Шапка.Организация, "ФайлПечать");
				Если ЗначениеЗаполнено(ДвоичныеДанныеПечать) Тогда
					ОбластьПодвал.Рисунки.Печать.Картинка = Новый Картинка(ДвоичныеДанныеПечать);
				КонецЕсли;
				Если ЗначениеЗаполнено(Шапка.ПредставительОрганизации) Тогда
				// Определим чью подпись необходимо подставить в документ. Определяем по ответственным лицам и представителю организации
				ОтветственныеЛицаОрганизации = ОтветственныеЛицаБП.ОтветственныеЛица(Шапка.Организация, Шапка.ДатаАктаСверки);
				Если ОтветственныеЛицаОрганизации.Руководитель = Шапка.ПредставительОрганизации Тогда
					ДвоичныеДанныеПодписьРуководителя = Справочники.Организации.ДвоичныеДанныеКартинкиОрганизации(Шапка.Организация, "ФайлПодписьРуководителя");
					Если ЗначениеЗаполнено(ДвоичныеДанныеПодписьРуководителя) Тогда 
						ОбластьПодвал.Рисунки.Подпись.Картинка = Новый Картинка(ДвоичныеДанныеПодписьРуководителя);
					КонецЕсли;
				ИначеЕсли ОтветственныеЛицаОрганизации.ГлавныйБухгалтер = Шапка.ПредставительОрганизации Тогда
					ДвоичныеДанныеПодписьГлавногоБухгалтера = Справочники.Организации.ДвоичныеДанныеКартинкиОрганизации(Шапка.Организация, "ФайлПодписьГлавногоБухгалтера");
					Если ЗначениеЗаполнено(ДвоичныеДанныеПодписьГлавногоБухгалтера) Тогда 
						ОбластьПодвал.Рисунки.Подпись.Картинка = Новый Картинка(ДвоичныеДанныеПодписьГлавногоБухгалтера);
					КонецЕсли;
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
		
		ТабличныйДокумент.Вывести(ОбластьПодвал);
		
		ТабличныйДокумент.ТолькоПросмотр = Истина;
		
	КонецЦикла; // Пока Шапка.Следующий()
	
	Возврат ТабличныйДокумент;
	
КонецФункции

Функция ПодготовитьПараметрыПечатиАктаСверкиНаСервере(МассивДокументов, СПечатью = Ложь) Экспорт
	
	ТабличныйДокумент = ПечатьАктаСверки(МассивДокументов, СПечатью);
	ТабличныйДокумент.ТолькоПросмотр      = Истина;
	ТабличныйДокумент.АвтоМасштаб         = Истина;
	ТабличныйДокумент.ОриентацияСтраницы  = ОриентацияСтраницы.Портрет;
	ТабличныйДокумент.ОтображатьЗаголовки = Ложь;
	ТабличныйДокумент.ОтображатьСетку     = Ложь;
	
	ПечатнаяФормаАктаСверки = ПоместитьВоВременноеХранилище(ТабличныйДокумент, Новый УникальныйИдентификатор);
	
	ОбъектыПечати = Новый СписокЗначений;
	ОбъектыПечати.ЗагрузитьЗначения(МассивДокументов);
	
	ДополнительныеПараметрыПечати = Новый Структура();
	ДополнительныеПараметрыПечати.Вставить("ПечатнаяФормаАктаСверки", ПечатнаяФормаАктаСверки);
	
	ПараметрыПечати = Новый Структура();
	ПараметрыПечати.Вставить("ЗаголовокФормы", НСтр("ru = ' Акт сверки взаиморасчетов '"));
	ПараметрыПечати.Вставить("ДополнительныеПараметры", ДополнительныеПараметрыПечати);
	
	ПараметрыПечатиАктаСверки = Новый Структура;
	ПараметрыПечатиАктаСверки.Вставить("ПечатнаяФормаАктаСверки", ПечатнаяФормаАктаСверки);
	ПараметрыПечатиАктаСверки.Вставить("ОбъектыПечати",           ОбъектыПечати.ВыгрузитьЗначения());
	ПараметрыПечатиАктаСверки.Вставить("ПараметрыПечати",         ПараметрыПечати);
	
	Возврат ПараметрыПечатиАктаСверки
	
КонецФункции

// Формирует и возвращает текст запроса для выборки данных,
// необходимых для формирования печатной формы
// Расширение. "Сверка_"
// Одноименная процедура заимствована из Модуля менеджера документа "АктСверкиВзаиморасчетов"
// Сделано по причине того, что эта процедура не экспортная.
//
Функция ПолучитьТекстЗапросаДляФормированияПечатнойФормыАктСверки()
	
	ТекстЗапроса =
	"ВЫБРАТЬ
	|	Акт.Ссылка КАК АктСверки,
	|	ВЫБОР
	|		КОГДА Акт.РазбитьПоДоговорам
	|			ТОГДА ТЧПоДаннымОрганизации.Договор
	|		ИНАЧЕ NULL
	|	КОНЕЦ КАК Договор,
	|	ТЧПоДаннымОрганизации.НомерСтроки КАК НомерСтроки,
	|	ТЧПоДаннымОрганизации.Дата КАК Дата,
	|	NULL КАК ДатаК,
	|	ТЧПоДаннымОрганизации.Документ КАК Документ,
	|	ТЧПоДаннымОрганизации.Представление КАК Представление,
	|	NULL КАК ПредставлениеК,
	|	ТЧПоДаннымОрганизации.Дебет КАК Дебет,
	|	ТЧПоДаннымОрганизации.Кредит КАК Кредит,
	|	0 КАК ДебетК,
	|	0 КАК КредитК,
	|	0 КАК НомерТабЧасти
	|ПОМЕСТИТЬ ДанныеДокумента
	|ИЗ
	|	Документ.АктСверкиВзаиморасчетов КАК Акт
	|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.АктСверкиВзаиморасчетов.ПоДаннымОрганизации КАК ТЧПоДаннымОрганизации
	|		ПО Акт.Ссылка = ТЧПоДаннымОрганизации.Ссылка
	|ГДЕ
	|	Акт.Ссылка В(&МассивДокументов)
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	Акт.Ссылка,
	|	ВЫБОР
	|		КОГДА Акт.РазбитьПоДоговорам
	|			ТОГДА ТЧПоДаннымКонтрагента.Договор
	|		ИНАЧЕ NULL
	|	КОНЕЦ,
	|	ТЧПоДаннымКонтрагента.НомерСтроки,
	|	NULL,
	|	ТЧПоДаннымКонтрагента.Дата,
	|	NULL,
	|	NULL,
	|	ТЧПоДаннымКонтрагента.Представление,
	|	0,
	|	0,
	|	ТЧПоДаннымКонтрагента.Дебет,
	|	ТЧПоДаннымКонтрагента.Кредит,
	|	1
	|ИЗ
	|	Документ.АктСверкиВзаиморасчетов КАК Акт
	|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.АктСверкиВзаиморасчетов.ПоДаннымКонтрагента КАК ТЧПоДаннымКонтрагента
	|		ПО Акт.Ссылка = ТЧПоДаннымКонтрагента.Ссылка
	|ГДЕ
	|	Акт.Ссылка В(&МассивДокументов)
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	АктСверки
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ДанныеДокумента.АктСверки КАК АктСверки,
	|	ДанныеДокумента.Договор КАК Договор,
	|	ДанныеДокумента.НомерСтроки КАК НомерСтроки,
	|	ДанныеДокумента.Дата КАК Дата,
	|	ДанныеДокумента.Дата КАК МинДата,
	|	ДанныеДокумента.Документ,
	|	ДанныеДокумента.Представление,
	|	ДанныеДокумента.ДатаК,
	|	ДанныеДокумента.ПредставлениеК,
	|	ДанныеДокумента.Дебет КАК СуммаДогДт,
	|	ДанныеДокумента.Кредит КАК СуммаДогКт,
	|	ДанныеДокумента.ДебетК КАК СуммаДогДтКонтр,
	|	ДанныеДокумента.КредитК КАК СуммаДогКтКонтр,
	|	АктСверкиВзаиморасчетов.Организация КАК Организация,
	|	АктСверкиВзаиморасчетов.Контрагент КАК Контрагент,
	|	АктСверкиВзаиморасчетов.Дата КАК ДатаАктаСверки,
	|	АктСверкиВзаиморасчетов.ПредставительОрганизации КАК ПредставительОрганизации,
	|	АктСверкиВзаиморасчетов.ПредставительКонтрагента КАК ПредставительКонтрагента,
	|	АктСверкиВзаиморасчетов.ДатаНачала КАК ДатаНачала,
	|	АктСверкиВзаиморасчетов.ДатаОкончания КАК ДатаОкончания,
	|	АктСверкиВзаиморасчетов.ОстатокНаНачало КАК ОстатокНаНачало,
	|	АктСверкиВзаиморасчетов.Расхождение КАК Расхождение,
	|	АктСверкиВзаиморасчетов.ДоговорКонтрагента КАК ДоговорКонтрагентаВШапке,
	|	АктСверкиВзаиморасчетов.ВалютаДокумента КАК ВалютаДокумента,
	|	АктСверкиВзаиморасчетов.РазбитьПоДоговорам КАК РазбитьПоДоговорам,
	|	АктСверкиВзаиморасчетов.СверкаСогласована КАК СверкаСогласована,
	|	ДанныеДокумента.НомерТабЧасти КАК НомерТабЧасти
	|ИЗ
	|	ДанныеДокумента КАК ДанныеДокумента
	|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.АктСверкиВзаиморасчетов КАК АктСверкиВзаиморасчетов
	|		ПО ДанныеДокумента.АктСверки = АктСверкиВзаиморасчетов.Ссылка
	|
	|УПОРЯДОЧИТЬ ПО
	|	НомерТабЧасти,
	|	ДанныеДокумента.НомерСтроки
	|ИТОГИ
	|	МИНИМУМ(МинДата),
	|	СУММА(СуммаДогДт),
	|	СУММА(СуммаДогКт),
	|	СУММА(СуммаДогДтКонтр),
	|	СУММА(СуммаДогКтКонтр),
	|	МАКСИМУМ(Организация),
	|	МАКСИМУМ(Контрагент),
	|	МАКСИМУМ(ДатаАктаСверки),
	|	МАКСИМУМ(ПредставительОрганизации),
	|	МАКСИМУМ(ПредставительКонтрагента),
	|	МАКСИМУМ(ДатаНачала),
	|	МАКСИМУМ(ДатаОкончания),
	|	МАКСИМУМ(ОстатокНаНачало),
	|	МАКСИМУМ(Расхождение),
	|	МАКСИМУМ(ДоговорКонтрагентаВШапке),
	|	МАКСИМУМ(ВалютаДокумента),
	|	МАКСИМУМ(РазбитьПоДоговорам),
	|	МАКСИМУМ(СверкаСогласована)
	|ПО
	|	АктСверки,
	|	Договор";
	
	Возврат ТекстЗапроса;
	
КонецФункции

Функция ОстаткиПоДоговорам(Шапка, АктСверкиВВалюте)
	
	ЗапросОстаткиДоговоров = Новый Запрос;
	ЗапросОстаткиДоговоров.УстановитьПараметр("Организация", Шапка.Организация);
	
	АналитикаРасчетов = Новый Массив;
	АналитикаРасчетов.Добавить(ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.Контрагенты);
	АналитикаРасчетов.Добавить(ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.Договоры);
	
	ЗапросОстаткиДоговоров.УстановитьПараметр("АналитикаРасчетов", АналитикаРасчетов);
	ЗапросОстаткиДоговоров.УстановитьПараметр("АктСверкиВВалюте",  АктСверкиВВалюте);
	ЗапросОстаткиДоговоров.УстановитьПараметр("НачалоПериода",     Шапка.ДатаНачала);
	ЗапросОстаткиДоговоров.УстановитьПараметр("КонецПериода",      Новый Граница(КонецДня(Шапка.ДатаОкончания), ВидГраницы.Включая));
	ЗапросОстаткиДоговоров.УстановитьПараметр("Контрагент",        Шапка.Контрагент);
	ЗапросОстаткиДоговоров.УстановитьПараметр("СчетаРасчета",      Шапка.АктСверки.СписокСчетов.ВыгрузитьКолонку("Счет"));
	ЗапросОстаткиДоговоров.Текст = 
	"ВЫБРАТЬ
	|	Хозрасчетный.Ссылка
	|ПОМЕСТИТЬ СчетаРасчета
	|ИЗ
	|	ПланСчетов.Хозрасчетный КАК Хозрасчетный
	|ГДЕ
	|	Хозрасчетный.Ссылка В ИЕРАРХИИ(&СчетаРасчета)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	Контрагенты.Ссылка КАК Контрагент
	|ПОМЕСТИТЬ Контрагенты
	|ИЗ
	|	Справочник.Контрагенты КАК Контрагенты
	|ГДЕ
	|	Контрагенты.ГоловнойКонтрагент = &Контрагент
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ХозрасчетныйОстатки.Субконто2 КАК Договор,
	|	ВЫБОР
	|		КОГДА ХозрасчетныйОстатки.Субконто2.Валютный
	|				И ХозрасчетныйОстатки.Субконто2.ОплатаВВалюте
	|				ИЛИ &АктСверкиВВалюте
	|			ТОГДА ХозрасчетныйОстатки.ВалютнаяСуммаОстатокДт
	|		ИНАЧЕ ХозрасчетныйОстатки.СуммаОстатокДт
	|	КОНЕЦ КАК НачОстатокПоДоговоруДт,
	|	ВЫБОР
	|		КОГДА ХозрасчетныйОстатки.Субконто2.Валютный
	|				И ХозрасчетныйОстатки.Субконто2.ОплатаВВалюте
	|				ИЛИ &АктСверкиВВалюте
	|			ТОГДА ХозрасчетныйОстатки.ВалютнаяСуммаОстатокКт
	|		ИНАЧЕ ХозрасчетныйОстатки.СуммаОстатокКт
	|	КОНЕЦ КАК НачОстатокПоДоговоруКт,
	|	ВЫБОР
	|		КОГДА ХозрасчетныйОстатки.Субконто2.РасчетыВУсловныхЕдиницах
	|			ТОГДА ХозрасчетныйОстатки.ВалютнаяСуммаОстатокДт
	|		ИНАЧЕ 0
	|	КОНЕЦ КАК НачВалОстатокПоДоговоруДт,
	|	ВЫБОР
	|		КОГДА ХозрасчетныйОстатки.Субконто2.РасчетыВУсловныхЕдиницах
	|			ТОГДА ХозрасчетныйОстатки.ВалютнаяСуммаОстатокКт
	|		ИНАЧЕ 0
	|	КОНЕЦ КАК НачВалОстатокПоДоговоруКт,
	|	0 КАК КонОстатокПоДоговоруДт,
	|	0 КАК КонОстатокПоДоговоруКт,
	|	0 КАК КонВалОстатокПоДоговоруДт,
	|	0 КАК КонВалОстатокПоДоговоруКт,
	|	ХозрасчетныйОстатки.Субконто2.ВалютаВзаиморасчетов КАК Валюта,
	|	ХозрасчетныйОстатки.Субконто2.РасчетыВУсловныхЕдиницах КАК РасчетыВУсловныхЕдиницах
	|ПОМЕСТИТЬ Остатки
	|ИЗ
	|	РегистрБухгалтерии.Хозрасчетный.Остатки(
	|			&НачалоПериода,
	|			Счет В
	|				(ВЫБРАТЬ
	|					СчетаРасчета.Ссылка
	|				ИЗ
	|					СчетаРасчета КАК СчетаРасчета),
	|			&АналитикаРасчетов,
	|			Организация = &Организация
	|				И Субконто1 В
	|					(ВЫБРАТЬ
	|						Контрагенты.Контрагент
	|					ИЗ
	|						Контрагенты КАК Контрагенты)) КАК ХозрасчетныйОстатки
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ХозрасчетныйОстатки.Субконто2,
	|	0,
	|	0,
	|	0,
	|	0,
	|	ВЫБОР
	|		КОГДА ХозрасчетныйОстатки.Субконто2.Валютный
	|				И ХозрасчетныйОстатки.Субконто2.ОплатаВВалюте
	|				ИЛИ &АктСверкиВВалюте
	|			ТОГДА ХозрасчетныйОстатки.ВалютнаяСуммаОстатокДт
	|		ИНАЧЕ ХозрасчетныйОстатки.СуммаОстатокДт
	|	КОНЕЦ,
	|	ВЫБОР
	|		КОГДА ХозрасчетныйОстатки.Субконто2.Валютный
	|				И ХозрасчетныйОстатки.Субконто2.ОплатаВВалюте
	|				ИЛИ &АктСверкиВВалюте
	|			ТОГДА ХозрасчетныйОстатки.ВалютнаяСуммаОстатокКт
	|		ИНАЧЕ ХозрасчетныйОстатки.СуммаОстатокКт
	|	КОНЕЦ,
	|	ВЫБОР
	|		КОГДА ХозрасчетныйОстатки.Субконто2.РасчетыВУсловныхЕдиницах
	|			ТОГДА ХозрасчетныйОстатки.ВалютнаяСуммаОстатокДт
	|		ИНАЧЕ 0
	|	КОНЕЦ,
	|	ВЫБОР
	|		КОГДА ХозрасчетныйОстатки.Субконто2.РасчетыВУсловныхЕдиницах
	|			ТОГДА ХозрасчетныйОстатки.ВалютнаяСуммаОстатокКт
	|		ИНАЧЕ 0
	|	КОНЕЦ,
	|	ХозрасчетныйОстатки.Субконто2.ВалютаВзаиморасчетов,
	|	ХозрасчетныйОстатки.Субконто2.РасчетыВУсловныхЕдиницах
	|ИЗ
	|	РегистрБухгалтерии.Хозрасчетный.Остатки(
	|			&КонецПериода,
	|			Счет В
	|				(ВЫБРАТЬ
	|					СчетаРасчета.Ссылка
	|				ИЗ
	|					СчетаРасчета КАК СчетаРасчета),
	|			&АналитикаРасчетов,
	|			Организация = &Организация
	|				И Субконто1 В
	|					(ВЫБРАТЬ
	|						Контрагенты.Контрагент
	|					ИЗ
	|						Контрагенты КАК Контрагенты)) КАК ХозрасчетныйОстатки
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	Остатки.Договор,
	|	СУММА(Остатки.НачОстатокПоДоговоруДт) КАК НачОстатокПоДоговоруДт,
	|	СУММА(Остатки.НачОстатокПоДоговоруКт) КАК НачОстатокПоДоговоруКт,
	|	СУММА(Остатки.НачВалОстатокПоДоговоруДт) КАК НачВалОстатокПоДоговоруДт,
	|	СУММА(Остатки.НачВалОстатокПоДоговоруКт) КАК НачВалОстатокПоДоговоруКт,
	|	СУММА(Остатки.КонОстатокПоДоговоруДт) КАК КонОстатокПоДоговоруДт,
	|	СУММА(Остатки.КонОстатокПоДоговоруКт) КАК КонОстатокПоДоговоруКт,
	|	СУММА(Остатки.КонВалОстатокПоДоговоруДт) КАК КонВалОстатокПоДоговоруДт,
	|	СУММА(Остатки.КонВалОстатокПоДоговоруКт) КАК КонВалОстатокПоДоговоруКт,
	|	Остатки.Валюта,
	|	Остатки.РасчетыВУсловныхЕдиницах
	|ИЗ
	|	Остатки КАК Остатки
	|
	|СГРУППИРОВАТЬ ПО
	|	Остатки.Договор,
	|	Остатки.Валюта,
	|	Остатки.РасчетыВУсловныхЕдиницах";
	Возврат ЗапросОстаткиДоговоров.Выполнить().Выгрузить();
	
КонецФункции

Функция СтрокаВалютнаяЗадолженностьПоДоговору(Шапка)

	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Организация", Шапка.Организация);
	
	АналитикаРасчетов = Новый Массив;
	АналитикаРасчетов.Добавить(ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.Контрагенты);
	АналитикаРасчетов.Добавить(ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.Договоры);
	
	Запрос.УстановитьПараметр("АналитикаРасчетов", АналитикаРасчетов);
	Запрос.УстановитьПараметр("КонецПериода",      Шапка.ДатаОкончания);
	Запрос.УстановитьПараметр("Контрагент",        Шапка.Контрагент);
	Запрос.УстановитьПараметр("Договор",           Шапка.ДоговорКонтрагентаВШапке);
	Запрос.УстановитьПараметр("СчетаРасчета",      Шапка.АктСверки.СписокСчетов.ВыгрузитьКолонку("Счет"));
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	Хозрасчетный.Ссылка
	|ПОМЕСТИТЬ СчетаРасчета
	|ИЗ
	|	ПланСчетов.Хозрасчетный КАК Хозрасчетный
	|ГДЕ
	|	Хозрасчетный.Ссылка В ИЕРАРХИИ(&СчетаРасчета)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ХозрасчетныйОстатки.Субконто2.ВалютаВзаиморасчетов КАК Валюта,
	|	ХозрасчетныйОстатки.ВалютнаяСуммаОстаток КАК Остаток
	|ИЗ
	|	РегистрБухгалтерии.Хозрасчетный.Остатки(
	|			&КонецПериода,
	|			Счет В
	|				(ВЫБРАТЬ
	|					СчетаРасчета.Ссылка
	|				ИЗ
	|					СчетаРасчета КАК СчетаРасчета),
	|			&АналитикаРасчетов,
	|			Организация = &Организация
	|				И Субконто1 = &Контрагент И Субконто2 = &Договор) КАК ХозрасчетныйОстатки";
	
	РезультатЗапроса = Запрос.Выполнить();
	
	Если РезультатЗапроса.Пустой() Тогда
		Возврат "";
	Иначе
		Выборка = РезультатЗапроса.Выбрать();
		Выборка.Следующий();
		Остаток = ?(Выборка.Остаток < 0, - Выборка.Остаток, Выборка.Остаток);
		Возврат СтрШаблон(НСтр("ru='
			|%1 %2'"),
			Формат(Остаток,"ЧЦ=21; ЧДЦ=2"),
			Выборка.Валюта);
	КонецЕсли;
	
КонецФункции

#КонецОбласти